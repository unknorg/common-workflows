# Needs:
## ENVIRONMENT VARIABLES:
# - HELM_REGISTRY_URL: The helm registry URL.
# - secrets.HELM_REGISTRY_USERNAME: The helm registry username.
# - secrets.HELM_REGISTRY_PASSWORD: The helm registry password.
# jobs.push-chart:
#   - HELM_CHART_ROOT: The directory containing the chart directory, defaults to "helm"
#   - HELM_CHART_DIR: The directory of the chart (where Chart.yaml is), relative to HELM_CHART_ROOT, defaults to "chart"
#   - HELM_CHART_VERSION: The version of the chart. Ignored if running from pull request"
#   - HELM_VALUES_IMAGE (Optional): The docker image to use in the chart.

internals:
  pre-helm: &pre_helm !zipped
    - uses: actions/checkout@v3
    - uses: azure/setup-helm@v3
      with:
        version: 'v3.11.1'
    - name: Add registry to helm
      run: helm registry login -u ${{ secrets.HELM_REGISTRY_USERNAME }} -p ${{ secrets.HELM_REGISTRY_PASSWORD }} ${{ env.HELM_REGISTRY_URL }}

jobs:
  push-chart:
    runs-on: ${{ inputs.runner }}
    steps: !unzip
      - *pre_helm
      - name: Format chart name
        run: echo "chart_name=$(echo ${{ github.event.repository.name }} | awk '{print tolower($0)}' | tr '_' '-')" >> $GITHUB_ENV
      - name: Format chart versions
        run: |
          if [[ "${{ github.event_name }}" = "pull_request" ]]; then
            commitSHA=${{ github.sha }}
            echo "chart_version=0.0.0-${{ env.HELM_CHART_VERSION }}-${commitSHA::8}" >> $GITHUB_ENV
            echo "chart_app_version=${{ env.HELM_CHART_VERSION }}-${commitSHA::8}" >> $GITHUB_ENV
          else
            semverRegex="^(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)\\.(0|[1-9][0-9]*)(\\-[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?(\\+[0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*)?$"
            (echo "${{ env.HELM_CHART_VERSION }}" | grep -Eq $semverRegex) \
              || (echo "::error::Expecting '${{ env.HELM_CHART_VERSION }}' to be a valid semantic version" && exit 1)
            echo "chart_version=${{ env.HELM_CHART_VERSION }}" >> $GITHUB_ENV
            echo "chart_app_version=${{ env.HELM_CHART_VERSION }}" >> $GITHUB_ENV
          fi
      - name: Replace chart and values with latest versions
        run: |
          update_yaml_field() {
            local yamlFile="$1"
            local fieldName="$2"
            local fieldValue="$3"
          
            if ! command -v yq &>/dev/null; then
            echo "Error: yq is not installed"
            return 1
            fi
          
            # Determine which yq is installed
            local yq_version_output
            yq_version_output=$(yq --version 2>&1)
          
            if [[ "$yq_version_output" == *"mikefarah"* ]]; then
            # mikefarah/yq syntax
            yq eval --inplace "$fieldName = \"${fieldValue}\"" "$yamlFile"
            elif [[ "$yq_version_output" == *"kislyuk"* || "$yq_version_output" == version\ * ]]; then
            # kislyuk/yq syntax (Python wrapper for jq)
            yq -Y --in-place "$fieldName = \"${fieldValue}\"" "$yamlFile"
            else
            echo "Unknown yq version. Please install either mikefarah/yq or kislyuk/yq."
            return 1
            fi
          }
          
          chartFile="${{ env.HELM_CHART_ROOT || 'helm' }}/${{ env.HELM_CHART_NAME || 'chart' }}/Chart.yaml"
          valuesFile="${{ env.HELM_CHART_ROOT || 'helm' }}/${{ env.HELM_CHART_NAME || 'chart' }}/values.yaml"
          update_yaml_field $chartFile ".name" "${{ env.chart_name }}"
          update_yaml_field $chartFile ".version" "${{ env.chart_version }}"
          update_yaml_field $chartFile ".appVersion" "${{ env.chart_app_version }}"
          [ ! "${{ env.HELM_VALUES_IMAGE }}" ] || update_yaml_field $valuesFile ".image.name" "${{ env.HELM_VALUES_IMAGE }}"
      - name: Package and push chart to registry
        run: |
          cd ${{ env.HELM_CHART_ROOT || 'helm' }}
          repoOwner="${{ github.repository_owner }}"
          helm package ${{ env.HELM_CHART_NAME || 'chart' }}
          helm push ${{ env.chart_name }}-${{ env.chart_version }}.tgz oci://${{ env.HELM_REGISTRY_URL }}/${repoOwner@L}