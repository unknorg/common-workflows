name: Dockerized Java Build
'on':
  workflow_call:
    inputs:
      jdk-version:
        description: The JDK version to use (8, 11, 15, ...)
        required: true
        default: '17'
        type: string
      java-build-tool:
        description: The build tool to use (maven for now)
        required: true
        default: maven
        type: string
      docker-registry:
        description: >-
          The docker registry to push the image to (docker-hub or ghcr or
          https://docker-repo.example/)
        required: true
        default: docker-hub
        type: string
      release-version:
        description: >-
          Release version to tag both the java and docker image with. Ignored if
          running from a pull request.
        required: false
        default: ''
        type: string
      use-custom-artifact-repo:
        description: >-
          Whether to use a custom artifact repository or use GitHubs shared
          storage
        required: false
        default: 'false'
        type: string
      artifact-repo-url:
        description: >-
          The URL of the artifact repository (if use-custom-artifact-repo ==
          "true")
        required: false
        default: ''
        type: string
      helm-registry:
        description: The helm registry URL
        required: true
        type: string
      helm-chart-root:
        description: The directory containing the chart directory
        required: false
        default: helm
        type: string
      helm-chart-directory:
        description: >-
          The directory of the chart (where Chart.yaml is), relative to
          inputs.helm-chart-root
        required: false
        default: chart
        type: string
    secrets:
      DOCKER_REPOSITORY_USER:
        description: >-
          Docker repository login username. Required if the docker registry
          requires authentication.
        required: false
      DOCKER_REPOSITORY_PASSWORD:
        description: >-
          Docker repository login password. Required if the docker registry
          requires authentication.
        required: false
      ADDITIONAL_DOCKER_REPOS:
        description: >-
          Additional docker repositories. Must be formatted as lines of
          "repoUrl;username;password".
        required: false
      MAVEN_SETTINGS_XML:
        description: A custom definition of ~/.m2/settings.xml
        required: false
      ARTIFACT_REPO_USER:
        description: >-
          The username of the artifact repository (if use-custom-artifact-repo
          == "true")
        required: false
      ARTIFACT_REPO_PASSWORD:
        description: >-
          The password of the artifact repository (if use-custom-artifact-repo
          == "true")
        required: false
      HELM_REGISTRY_USERNAME:
        description: The helm registry username
        required: true
      HELM_REGISTRY_PASSWORD:
        description: The helm registry password
        required: true
jobs:
  lint-commits:
    runs-on: arc-systems
    steps:
      - name: Lint commits
        uses: actions-ecosystem/action-lint-commits@v1
        id: lint-commits
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          regex: '^\w+(\(.+\))?: .+'
          format: markdown
      - name: Fail immediately if not a pull request
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "::error::Commit messages don't pass lint."
          echo "::error::${{ steps.lint-commits.outputs.unmatched_commits }}"
          exit 1
      - name: Post warning comment
        uses: Hathoute/action-create-comment@v1.0.4
        if: ${{ steps.lint-commits.outputs.unmatched_commits != '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_uid: 513522
          body: >
            The following commits needs their message changes:


            ${{ steps.lint-commits.outputs.unmatched_commits }}


            The format `<type>(<scope>): <subject>` (`^\w+(\(.+\))?: .+`) is
            acceptable. e.g., `feat(api): Add /users/get`
      - name: Post valid comment
        uses: Hathoute/action-create-comment@v1.0.4
        if: ${{ steps.lint-commits.outputs.unmatched_commits == '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_uid: 513522
          body: |
            All the commit messages are valid.

            ✔️ Lint passed.
      - name: Fail when commits don't pass lint
        if: ${{ steps.lint-commits.outputs.unmatched_commits != '' }}
        run: >
          echo "::error::Commit messages don't pass lint, check the comment on
          the PR for more details."

          exit 1
    if: ${{ github.event_name == 'pull_request' }}
  format-release-version:
    runs-on: arc-systems
    steps:
      - name: Format release version for PR
        if: ${{ github.event_name == 'pull_request' }}
        id: pull-request
        run: echo "version=${{ github.head_ref }}" >> $GITHUB_ENV
      - name: Format release version for release
        if: ${{ github.event_name != 'pull_request' }}
        id: release
        run: echo "version=${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV
      - name: Unify
        id: unified
        run: echo "release_version=${{ env.version }}" >> $GITHUB_OUTPUT
    outputs:
      release_version: ${{ steps.unified.outputs.release_version }}
    env:
      RELEASE_VERSION: ${{ inputs.release-version }}
  mvn-build-java:
    runs-on: arc-systems
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: >
          echo "internal_build_tool=maven" >> $GITHUB_ENV

          echo "cache_dir=~/.m2/repository" >> $GITHUB_ENV

          echo "cache_hash=$(sha1sum ./pom.xml | awk '{print $1}')" >>
          $GITHUB_ENV
      - name: Format actions/setup-java cache
        run: |
          cachePkgMgr=""
          if [[ ${{ env.USE_CUSTOM_ARTIFACT_REPO }} != "true" ]]; then
            cachePkgMgr="${{ env.internal_build_tool }}"
          fi
          echo "jdk_cache=$cachePkgMgr" >> $GITHUB_ENV
      - name: Set up JDK ${{ env.JAVA_JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_JDK_VERSION }}
          distribution: ${{ env.JAVA_JDK_DISTRIBUTION || 'corretto' }}
          cache: ${{ env.jdk_cache }}
      - name: Download cached dependencies
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          mkdir -p ${{ env.cache_dir }}

          cd ${{ env.cache_dir }}

          cachePath="${{ env.ARTIFACT_REPO_URL }}cache/${{
          env.internal_build_tool }}/${{ env.cache_hash }}/cached.tar.gz"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' -o cached.tar.gz --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' $cachePath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "200" || $statusCode = "404" || $tries = "5" ]] && break
          done

          [[ $statusCode = "200" ]] || exit 0

          tar -xzf cached.tar.gz

          rm -rf cached.tar.gz
      - name: Update settings.xml
        run: >-
          [ ! "${{ secrets.MAVEN_SETTINGS_XML }}"] || echo "${{
          secrets.MAVEN_SETTINGS_XML }}" > ~/.m2/settings.xml
      - name: Build with Maven
        run: >-
          mvn -Drevision=${{ env.JAVA_BUILD_VERSION }} -B clean install --file
          pom.xml
      - name: Compress build artifact
        run: zip -r build.zip target
      - name: Upload artifact using Github
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO != 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: build.zip
      - name: Upload artifact using external service
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          artifactPath="${{ env.ARTIFACT_REPO_URL }}github/${{ github.run_id
          }}/${{ env.BUILD_ARTIFACT_NAME }}"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' --silent --output /dev/null \
            --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' \
            --upload-file build.zip $artifactPath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "201" || $tries = "5" ]] && break
          done

          # Fail if statusCode is not 201 - Created

          [[ $statusCode = "201" ]] || exit 1
      - name: Upload cached dependencies
        run: >
          mkdir -p ${{ env.cache_dir }}

          cd ${{ env.cache_dir }}

          [[ -z "$(ls -A .)" ]] && exit 0


          tar -cvzf ../cached.tar.gz .


          cachePath="${{ env.ARTIFACT_REPO_URL }}cache/${{
          env.internal_build_tool }}/${{ env.cache_hash }}/cached.tar.gz"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' --silent --output /dev/null \
            --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' \
            --upload-file ../cached.tar.gz $cachePath)
            echo "::debug::Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "201" || $tries = "5" ]] && break
          done


          # Warn if statusCode is not 201 - Created

          [[ $statusCode = "201" ]] || echo "::warning Could not upload cache"
    needs:
      - format-release-version
    if: ${{ inputs.java-build-tool == 'maven' }}
    env:
      JAVA_JDK_VERSION: ${{ inputs.jdk-version }}
      JAVA_BUILD_TOOL: ${{ inputs.java-build-tool }}
      JAVA_BUILD_VERSION: ${{ needs.format-release-version.outputs.release_version }}
      BUILD_ARTIFACT_NAME: ${{ needs.format-release-version.outputs.release_version }}
      USE_CUSTOM_ARTIFACT_REPO: ${{ inputs.use-custom-artifact-repo }}
      ARTIFACT_REPO_URL: ${{ inputs.artifact-repo-url }}
  build-docker-hub:
    runs-on: arc-systems
    steps:
      - run: >-
          echo "internal_docker_name=${{ env.DOCKER_IMAGE_NAME }}" >>
          $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_REPOSITORY_USER }}
          password: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
      - name: Register additional repositories
        run: |
          echo "${{ secrets.ADDITIONAL_DOCKER_REPOS }}" | while read line
          do
            IFS=';' read -r -a array <<< "$line"
            docker login ${array[0]} -u ${array[1]} -p ${array[2]}
          done
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact using Github
        uses: actions/download-artifact@v3
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO != 'true' }}
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: build.zip
      - name: Download artifact using external service
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          artifactPath="${{ env.ARTIFACT_REPO_URL }}github/${{ github.run_id
          }}/${{ env.BUILD_ARTIFACT_NAME }}"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' -o build.zip --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' $artifactPath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "200" || $tries = "5" ]] && break
          done

          # Fail if statusCode is not 200 - OK

          [[ $statusCode = "200" ]] || exit 1
      - name: Unzip build artifact
        run: unzip build.zip
      - name: Build Docker image
        run: docker build -t ${{ env.internal_docker_name }} .
      - name: Push Docker image
        run: docker push ${{ env.internal_docker_name }}
      - name: Job outputs
        id: outputs
        run: echo "docker_image=${{ env.internal_docker_name }}" >> $GITHUB_OUTPUT
    outputs:
      docker_image: ${{ steps.outputs.outputs.docker_image }}
    needs:
      - format-release-version
      - mvn-build-java
    if: |
      always() &&
      contains(needs.*.result, 'success') &&
      inputs.docker-registry == 'docker-hub'
    env:
      DOCKER_IMAGE_TAG: ${{ needs.format-release-version.outputs.release_version }}
      DOCKER_REGISTRY: ${{ inputs.docker-registry }}
      BUILD_ARTIFACT_NAME: ${{ needs.format-release-version.outputs.release_version }}
      USE_CUSTOM_ARTIFACT_REPO: ${{ inputs.use-custom-artifact-repo }}
      ARTIFACT_REPO_URL: ${{ inputs.artifact-repo-url }}
  build-docker-ghcr:
    runs-on: arc-systems
    steps:
      - run: >-
          echo "ghcr.io/${{ github.repository }}:${{ env.DOCKER_IMAGE_TAG }}" |
          awk '{ print "internal_docker_name="tolower($0) }' >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Register additional repositories
        run: |
          echo "${{ secrets.ADDITIONAL_DOCKER_REPOS }}" | while read line
          do
            IFS=';' read -r -a array <<< "$line"
            docker login ${array[0]} -u ${array[1]} -p ${array[2]}
          done
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact using Github
        uses: actions/download-artifact@v3
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO != 'true' }}
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: build.zip
      - name: Download artifact using external service
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          artifactPath="${{ env.ARTIFACT_REPO_URL }}github/${{ github.run_id
          }}/${{ env.BUILD_ARTIFACT_NAME }}"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' -o build.zip --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' $artifactPath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "200" || $tries = "5" ]] && break
          done

          # Fail if statusCode is not 200 - OK

          [[ $statusCode = "200" ]] || exit 1
      - name: Unzip build artifact
        run: unzip build.zip
      - name: Build Docker image
        run: docker build -t ${{ env.internal_docker_name }} .
      - name: Push Docker image
        run: docker push ${{ env.internal_docker_name }}
      - name: Job outputs
        id: outputs
        run: echo "docker_image=${{ env.internal_docker_name }}" >> $GITHUB_OUTPUT
    outputs:
      docker_image: ${{ steps.outputs.outputs.docker_image }}
    needs:
      - format-release-version
      - mvn-build-java
    if: |
      always() &&
      contains(needs.*.result, 'success') &&
      inputs.docker-registry == 'ghcr'
    env:
      DOCKER_IMAGE_TAG: ${{ needs.format-release-version.outputs.release_version }}
      DOCKER_REGISTRY: ${{ inputs.docker-registry }}
      BUILD_ARTIFACT_NAME: ${{ needs.format-release-version.outputs.release_version }}
      USE_CUSTOM_ARTIFACT_REPO: ${{ inputs.use-custom-artifact-repo }}
      ARTIFACT_REPO_URL: ${{ inputs.artifact-repo-url }}
  build-docker-custom:
    runs-on: arc-systems
    steps:
      - run: >-
          echo "${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:${{
          env.DOCKER_IMAGE_TAG }}" | awk '{ print
          "internal_docker_name="tolower($0) }' >> $GITHUB_ENV
      - name: Login to the Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REPOSITORY_USER }}
          password: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
      - name: Register additional repositories
        run: |
          echo "${{ secrets.ADDITIONAL_DOCKER_REPOS }}" | while read line
          do
            IFS=';' read -r -a array <<< "$line"
            docker login ${array[0]} -u ${array[1]} -p ${array[2]}
          done
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifact using Github
        uses: actions/download-artifact@v3
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO != 'true' }}
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: build.zip
      - name: Download artifact using external service
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          artifactPath="${{ env.ARTIFACT_REPO_URL }}github/${{ github.run_id
          }}/${{ env.BUILD_ARTIFACT_NAME }}"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' -o build.zip --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' $artifactPath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "200" || $tries = "5" ]] && break
          done

          # Fail if statusCode is not 200 - OK

          [[ $statusCode = "200" ]] || exit 1
      - name: Unzip build artifact
        run: unzip build.zip
      - name: Build Docker image
        run: docker build -t ${{ env.internal_docker_name }} .
      - name: Push Docker image
        run: docker push ${{ env.internal_docker_name }}
      - name: Job outputs
        id: outputs
        run: echo "docker_image=${{ env.internal_docker_name }}" >> $GITHUB_OUTPUT
    outputs:
      docker_image: ${{ steps.outputs.outputs.docker_image }}
    needs:
      - format-release-version
      - mvn-build-java
    if: |
      always() &&
      contains(needs.*.result, 'success') &&
      inputs.docker-registry != 'docker-hub' && 
      inputs.docker-registry != 'ghcr'
    env:
      DOCKER_IMAGE_TAG: ${{ needs.format-release-version.outputs.release_version }}
      DOCKER_REGISTRY: ${{ inputs.docker-registry }}
      BUILD_ARTIFACT_NAME: ${{ needs.format-release-version.outputs.release_version }}
      USE_CUSTOM_ARTIFACT_REPO: ${{ inputs.use-custom-artifact-repo }}
      ARTIFACT_REPO_URL: ${{ inputs.artifact-repo-url }}
  build-helm-custom:
    runs-on: arc-systems
    steps:
      - uses: actions/checkout@v3
      - uses: azure/setup-helm@v3
        with:
          version: v3.11.1
      - name: Add registry to helm
        run: >-
          helm registry login -u ${{ secrets.HELM_REGISTRY_USERNAME }} -p ${{
          secrets.HELM_REGISTRY_PASSWORD }} ${{ env.HELM_REGISTRY_URL }}
      - name: Format chart name
        run: >-
          echo "chart_name=$(echo ${{ github.event.repository.name }} | awk
          '{print tolower($0)}' | tr '_' '-')" >> $GITHUB_ENV
      - name: Format chart versions
        run: |
          if [[ "${{ github.event_name }}" = "pull_request" ]]; then
            commitSHA=${{ github.sha }}
            echo "chart_version=0.0.0-${{ env.HELM_CHART_VERSION }}-${commitSHA::8}" >> $GITHUB_ENV
            echo "chart_app_version=${{ env.HELM_CHART_VERSION }}-${commitSHA::8}" >> $GITHUB_ENV
          else
            semverRegex='^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'
            (echo "${{ env.HELM_CHART_VERSION }}" | grep -Eq $semverRegex) \
              || (echo "::error::Expecting '${{ env.HELM_CHART_VERSION }}' to be a valid semantic version" && exit 1)
            echo "chart_version=${{ env.HELM_CHART_VERSION }}" >> $GITHUB_ENV
            echo "chart_app_version=${{ env.HELM_CHART_VERSION }}" >> $GITHUB_ENV
          fi
      - name: Replace chart and values with latest versions
        run: >
          chartFile="${{ env.HELM_CHART_ROOT || 'helm' }}/${{
          env.HELM_CHART_NAME || 'chart' }}/Chart.yaml"

          valuesFile="${{ env.HELM_CHART_ROOT || 'helm' }}/${{
          env.HELM_CHART_NAME || 'chart' }}/values.yaml"

          yq -Y --in-place '.name = "${{ env.chart_name }}"' $chartFile

          yq -Y --in-place '.version = "${{ env.chart_version }}"' $chartFile

          yq -Y --in-place '.appVersion = "${{ env.chart_app_version }}"'
          $chartFile

          [ ! "${{ env.HELM_VALUES_IMAGE }}" ] || yq -Y --in-place '.image.name
          = "${{ env.HELM_VALUES_IMAGE }}"' $valuesFile
      - name: Package and push chart to registry
        run: >
          cd ${{ env.HELM_CHART_ROOT || 'helm' }}

          helm package ${{ env.HELM_CHART_NAME || 'chart' }}

          helm push ${{ env.chart_name }}-${{ env.chart_version }}.tgz oci://${{
          env.HELM_REGISTRY_URL }}/${{ github.repository_owner }}
    needs:
      - format-release-version
      - build-docker-custom
    env:
      HELM_REGISTRY_URL: ${{ inputs.helm-registry }}
      HELM_CHART_ROOT: ${{ inputs.helm-chart-root }}
      HELM_CHART_DIR: ${{ inputs.helm-chart-directory }}
      HELM_CHART_VERSION: ${{ needs.format-release-version.outputs.release_version }}
      HELM_VALUES_IMAGE: ${{ needs.build-docker-custom.outputs.docker_image }}
