name: Deploy Java Library
'on':
  workflow_call:
    inputs:
      jdk-version:
        description: The JDK version to use (8, 11, 15, ...)
        required: true
        default: '17'
        type: string
      java-build-tool:
        description: The build tool to use (maven for now)
        required: true
        default: maven
        type: string
      release-version:
        description: >-
          Release version to tag the release with. Ignored if running from a
          pull request.
        required: false
        default: ''
        type: string
    secrets:
      MAVEN_SETTINGS_XML:
        description: A custom definition of ~/.m2/settings.xml
        required: false
jobs:
  lint-commits:
    runs-on: arc-systems
    steps:
      - name: Lint commits
        uses: actions-ecosystem/action-lint-commits@v1
        id: lint-commits
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          regex: '^\w+(\(.+\))?: .+'
          format: markdown
      - name: Fail immediately if not a pull request
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          echo "::error::Commit messages don't pass lint."
          echo "::error::${{ steps.lint-commits.outputs.unmatched_commits }}"
          exit 1
      - name: Post warning comment
        uses: Hathoute/action-create-comment@v1.0.4
        if: ${{ steps.lint-commits.outputs.unmatched_commits != '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_uid: 513522
          body: >
            The following commits needs their message changes:


            ${{ steps.lint-commits.outputs.unmatched_commits }}


            The format `<type>(<scope>): <subject>` (`^\w+(\(.+\))?: .+`) is
            acceptable. e.g., `feat(api): Add /users/get`
      - name: Post valid comment
        uses: Hathoute/action-create-comment@v1.0.4
        if: ${{ steps.lint-commits.outputs.unmatched_commits == '' }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          comment_uid: 513522
          body: |
            All the commit messages are valid.

            ✔️ Lint passed.
      - name: Fail when commits don't pass lint
        if: ${{ steps.lint-commits.outputs.unmatched_commits != '' }}
        run: >
          echo "::error::Commit messages don't pass lint, check the comment on
          the PR for more details."

          exit 1
    if: ${{ github.event_name == 'pull_request' }}
  format-release-version:
    runs-on: arc-systems
    steps:
      - name: Format release version for PR
        if: ${{ github.event_name == 'pull_request' }}
        id: pull-request
        run: |
          head_ref=${{ github.head_ref }}
          if [[ $head_ref == "dependabot"* ]]; then
            echo "::debug::Dependabot branch, selecting the last part as the version."
            echo "version=${head_ref##*/}" >> $GITHUB_ENV
            exit 0
          elif [[ ! $head_ref =~ ^[a-z0-9_\.\-]+$ ]]; then
            echo "::error::Branch name does not respect regex [a-z0-9_\\.\\-]"
            exit 1
          fi
          echo "version=$head_ref" >> $GITHUB_ENV
      - name: Format release version for release
        if: ${{ github.event_name != 'pull_request' }}
        id: release
        run: echo "version=${{ env.RELEASE_VERSION }}" >> $GITHUB_ENV
      - name: Unify
        id: unified
        run: echo "release_version=${{ env.version }}" >> $GITHUB_OUTPUT
    outputs:
      release_version: ${{ steps.unified.outputs.release_version }}
  build-java-maven:
    runs-on: arc-systems
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      - run: >
          echo "internal_build_tool=maven" >> $GITHUB_ENV

          echo "cache_dir=~/.m2/repository" >> $GITHUB_ENV

          echo "cache_hash=$(sha1sum ./pom.xml | awk '{print $1}')" >>
          $GITHUB_ENV
      - name: Format actions/setup-java cache
        run: |
          cachePkgMgr=""
          if [[ ${{ env.USE_CUSTOM_ARTIFACT_REPO }} != "true" ]]; then
            cachePkgMgr="${{ env.internal_build_tool }}"
          fi
          echo "jdk_cache=$cachePkgMgr" >> $GITHUB_ENV
      - name: Set up JDK ${{ env.JAVA_JDK_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_JDK_VERSION }}
          distribution: ${{ env.JAVA_JDK_DISTRIBUTION || 'corretto' }}
          cache: ${{ env.jdk_cache }}
      - name: Download cached dependencies
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          mkdir -p ${{ env.cache_dir }}

          cd ${{ env.cache_dir }}

          cachePath="${{ env.ARTIFACT_REPO_URL }}cache/${{
          env.internal_build_tool }}/${{ env.cache_hash }}/cached.tar.gz"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' -o cached.tar.gz --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' $cachePath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "200" || $statusCode = "404" || $tries = "5" ]] && break
          done

          [[ $statusCode = "200" ]] || exit 0

          tar -xzf cached.tar.gz

          rm -rf cached.tar.gz
      - name: Update settings.xml
        run: >-
          [ ! "${{ secrets.MAVEN_SETTINGS_XML }}"] || echo "${{
          secrets.MAVEN_SETTINGS_XML }}" > ~/.m2/settings.xml
      - name: Build with Maven
        run: >-
          mvn -Drevision=${{ env.JAVA_BUILD_VERSION }} -B clean install --file
          pom.xml
      - name: Compress build artifact
        run: zip -r build.zip target
      - name: Upload artifact using Github
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO != 'true' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.BUILD_ARTIFACT_NAME }}
          path: build.zip
      - name: Upload artifact using external service
        if: ${{ env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
        run: >
          artifactPath="${{ env.ARTIFACT_REPO_URL }}github/${{ github.run_id
          }}/${{ env.BUILD_ARTIFACT_NAME }}"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' --silent --output /dev/null \
            --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' \
            --upload-file build.zip $artifactPath)
            echo "Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "201" || $tries = "5" ]] && break
          done

          # Fail if statusCode is not 201 - Created

          [[ $statusCode = "201" ]] || exit 1
      - name: Upload cached dependencies
        run: >
          mkdir -p ${{ env.cache_dir }}

          cd ${{ env.cache_dir }}

          [[ -z "$(ls -A .)" ]] && exit 0


          tar -cvzf ../cached.tar.gz .


          cachePath="${{ env.ARTIFACT_REPO_URL }}cache/${{
          env.internal_build_tool }}/${{ env.cache_hash }}/cached.tar.gz"

          tries=0

          while : ; do
            statusCode=$(curl --write-out '%{http_code}' --silent --output /dev/null \
            --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' \
            --upload-file ../cached.tar.gz $cachePath)
            echo "::debug::Try $((++tries)) - Status code: $statusCode"
            [[ $statusCode = "201" || $tries = "5" ]] && break
          done


          # Warn if statusCode is not 201 - Created

          [[ $statusCode = "201" ]] || echo "::warning Could not upload cache"
    needs:
      - format-release-version
