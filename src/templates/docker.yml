# Needs:
## ENVIRONMENT VARIABLES:
# - DOCKER_IMAGE_TAG: The tag of the Docker image to build, e.g. latest, 1.0.0, dev-snapshot, ....
# - DOCKER_REGISTRY: The name/url of the docker registry.
# - BUILD_ARTIFACT_NAME (Optional) : The name of the artifact containing the data to copy to docker
# - USE_CUSTOM_ARTIFACT_REPO (Optional): Whether to use a custom artifact repository or use GitHub's shared storage.
# - secrets.ADDITIONAL_DOCKER_REPOS (Optional): Additional docker repositories (repoUrl;username;password)
# - if USE_CUSTOM_ARTIFACT_REPO is 'true':
# -   ARTIFACT_REPO_URL (Optional): The URL of the artifact repository (if USE_CUSTOM_ARTIFACT_REPO == true).
# -   secrets.ARTIFACT_REPO_USER (Optional): The username of the artifact repository (if USE_CUSTOM_ARTIFACT_REPO == true).
# -   secrets.ARTIFACT_REPO_PASSWORD (Optional): The password of the artifact repository (if USE_CUSTOM_ARTIFACT_REPO == true).
# - if not using build-docker-ghcr:
# -   secrets.DOCKER_REPOSITORY_USER: The username of the Docker account to push the image to.
# -   secrets.DOCKER_REPOSITORY_PASSWORD: The password of the Docker account to push the image to.

internals:
  - init-docker: &init_docker
      name: Register additional repositories
      run: |
        echo "${{ secrets.ADDITIONAL_DOCKER_REPOS }}" | while read line
        do
          IFS=';' read -r -a array <<< "$line"
          docker login ${array[0]} -u ${array[1]} -p ${array[2]}
        done

  - build-image: &build_image !zipped
    - *init_docker
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Download artifact using Github
      uses: actions/download-artifact@v4
      if: ${{ env.BUILD_ARTIFACT_NAME != '' && env.USE_CUSTOM_ARTIFACT_REPO != 'true' }}
      with:
        name: ${{ env.BUILD_ARTIFACT_NAME }}
        path: build.zip
    - name: Download artifact using external service
      if: ${{ env.BUILD_ARTIFACT_NAME != '' && env.USE_CUSTOM_ARTIFACT_REPO == 'true' }}
      run: |
        artifactPath="${{ env.ARTIFACT_REPO_URL }}github/${{ github.run_id }}/${{ env.BUILD_ARTIFACT_NAME }}"
        tries=0
        while : ; do
          statusCode=$(curl --write-out '%{http_code}' -o build.zip --user '${{ secrets.ARTIFACT_REPO_USER }}:${{ secrets.ARTIFACT_REPO_PASSWORD }}' $artifactPath)
          echo "Try $((++tries)) - Status code: $statusCode"
          [[ $statusCode = "200" || $tries = "5" ]] && break
        done
        # Fail if statusCode is not 200 - OK
        [[ $statusCode = "200" ]] || exit 1
    - name: Unzip build artifact
      if: ${{ env.BUILD_ARTIFACT_NAME != '' }}
      run: unzip build.zip
    - name: Build Docker image
      run: docker build -t ${{ env.docker_image_with_tag }} .
    - name: Push Docker image
      run: docker push ${{ env.docker_image_with_tag }}
    - name: Job outputs
      id: outputs
      run: |
        echo "docker_image=${{ env.docker_image }}" >> $GITHUB_OUTPUT
        echo "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}" >> $GITHUB_OUTPUT
  - job-outputs: &job_output
      docker_image: ${{ steps.outputs.outputs.docker_image }}
      docker_image_tag: ${{ steps.outputs.outputs.docker_image_tag }}

jobs:
  build-docker-hub:
    runs-on: ${{ inputs.runner }}
    steps: !unzip
      - run: |
          docker_image="${{ github.repository }}"
          echo "docker_image=${docker_image@L}" >> $GITHUB_ENV
          echo "docker_image_with_tag=${docker_image@L}:${{ env.DOCKER_IMAGE_TAG }}" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_REPOSITORY_USER }}
          password: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
      - *build_image
    outputs: *job_output
  build-docker-ghcr:
    runs-on: ${{ inputs.runner }}
    steps: !unzip
      - run: |
          docker_image="ghcr.io/${{ github.repository }}"
          echo "docker_image=${docker_image@L}" >> $GITHUB_ENV
          echo "docker_image_with_tag=${docker_image@L}:${{ env.DOCKER_IMAGE_TAG }}" >> $GITHUB_ENV
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - *build_image
    outputs: *job_output
  build-docker-custom:
    runs-on: ${{ inputs.runner }}
    steps: !unzip
      - run: |
          docker_image="${{ env.DOCKER_REGISTRY }}/${{ github.repository }}"
          echo "docker_image=${docker_image@L}" >> $GITHUB_ENV
          echo "docker_image_with_tag=${docker_image@L}:${{ env.DOCKER_IMAGE_TAG }}" >> $GITHUB_ENV
      - name: Login to the Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_REPOSITORY_USER }}
          password: ${{ secrets.DOCKER_REPOSITORY_PASSWORD }}
      - *build_image
    outputs: *job_output